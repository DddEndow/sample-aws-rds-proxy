AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sample-aws-rds-proxy

  Sample SAM Template for sample-aws-rds-proxy

Parameters:
  pVpcCIDR:
    Description: "CIDR block for VPC (recommend /16)"
    Type: "String"
    Default: "10.100.0.0/16"
  pPrivateSubnet1CIDR:
    Description: "CIDR block for Private Subnet"
    Type: "String"
    Default: "10.100.0.0/18"
  pPrivateSubnet2CIDR:
    Description: "CIDR block for Private Subnet"
    Type: "String"
    Default: "10.100.128.0/18"
  pPublicSubnet1CIDR:
    Description: "CIDR block for Public Subnet"
    Type: "String"
    Default: "10.100.64.0/18"

    ## public subnet 2: 10.100.192.0/18

  RDSDBPort:
    Default: 3306
    Type: "Number"
    MinValue: 1150
    MaxValue: 65535
    Description: "Enter TCP/IP port used to connect DB in RDS."
  RDSRootUserName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9-]+"
    ConstraintDescription: "must be between 1 to 16 alphanumeric characters."
    Description: "The database admin account user name, between 1 to 16 alphanumeric characters."
    MaxLength: 16
    MinLength: 1
    Default: "root"
  RDSRootUserPwd:
    NoEcho: true
    Type: "String"
    MinLength: 1
    MaxLength: 41
    AllowedPattern: "^[a-zA-Z0-9]*$"
    Description: "Enter the database admin account password in RDS"
  RDSLambdaUserName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9-]+"
    ConstraintDescription: "must be between 1 to 16 alphanumeric characters."
    Description: "The database admin account user name, between 1 to 16 alphanumeric characters."
    MaxLength: 16
    MinLength: 1
    Default: "lambda"
  RDSLambdaUserPwd:
    NoEcho: true
    Type: "String"
    MinLength: 1
    MaxLength: 41
    AllowedPattern: "^[a-zA-Z0-9]*$"
    Description: "Enter the database admin account password in RDS"

  EC2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."
    Description: "Enter the name of an existing EC2 KeyPair to enable SSH access to the instance"
  EC2CidrIp:
    Description: "IP address allowed to access EC2"
    Type: "String"
    Default: ""

Globals:
  Function:
    Timeout: 10
    Handler: app.lambda_handler
    Runtime: python3.8

Mappings:
  RegionMap:
    eu-west-1:
      AL2: ami-01720b5f421cf0179
    eu-west-2:
      AL2: ami-0a669382ea0feb73a

Resources:
  #
  # Network
  #
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref "pVpcCIDR"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref "pPrivateSubnet1CIDR"
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref "pPrivateSubnet2CIDR"
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref "pPublicSubnet1CIDR"
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  IGW:
    Type: "AWS::EC2::InternetGateway"

  IgwAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn:
      - "IGW"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PublicRouteToIGW:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref IGW

  PrivateSubnet1RouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PublicSubnet1RouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  #
  # SecretsManager
  #
  RDSMasterPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: sample-rds-root-user
      SecretString:
        !Sub |
        {
          "username":"${RDSRootUserName}",
          "password":"${RDSRootUserPwd}"
        }

  RDSLambdaUserPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: sample-rds-lambda-user
      SecretString:
        !Sub |
        {
          "username":"${RDSLambdaUserName}",
          "password":"${RDSLambdaUserPwd}"
        }

  #
  # RDS
  #
  RDSSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSMasterPassword
      TargetId: !Ref RDSInstance
      TargetType: AWS::RDS::DBInstance

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      EngineVersion: 5.7
      DBInstanceClass: db.t2.small
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: !Ref RDSRootUserName
      MasterUserPassword: !Ref RDSRootUserPwd
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: "sample-rds-subnet-group"
      DBSubnetGroupDescription: "-"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SecurityGroup rds-grp"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: !Ref RDSDBPort
          ToPort: !Ref RDSDBPort
          SourceSecurityGroupId: !Ref EC2SecurityGroup
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref RDSProxySecurityGroup
          FromPort: !Ref RDSDBPort
          ToPort: !Ref RDSDBPort

  #
  # RDS Proxy
  #
  RDSProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security Group for RDS Proxy"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: !Ref RDSDBPort
          ToPort: !Ref RDSDBPort
          SourceSecurityGroupId: !Ref EC2SecurityGroup
        - IpProtocol: "tcp"
          FromPort: !Ref RDSDBPort
          ToPort: !Ref RDSDBPort
          SourceSecurityGroupId: !Ref FunctionSecurityGroup

  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowGetSecretValue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref RDSSecretAttachment
                  - !Ref RDSLambdaUserPassword

  RDSProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: sample-rds-proxy-for-mysql
      EngineFamily: MYSQL
      RoleArn: !GetAtt RDSProxyRole.Arn
      Auth:
        - AuthScheme: SECRETS
          SecretArn: !Ref RDSSecretAttachment
          IAMAuth: DISABLED
        - AuthScheme: SECRETS
          SecretArn: !Ref RDSLambdaUserPassword
          IAMAuth: DISABLED
      VpcSecurityGroupIds:
        - !Ref RDSProxySecurityGroup
      VpcSubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    DependsOn:
      - RDSInstance
    Properties:
      DBProxyName: !Ref RDSProxy
      DBInstanceIdentifiers:
        - !Ref RDSInstance
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
        ConnectionBorrowTimeout: 120
        MaxConnectionsPercent: 90
        MaxIdleConnectionsPercent: 10

  RDSProxyWithIam:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: sample-rds-proxy-for-mysql-with-iam
      EngineFamily: MYSQL
      RequireTLS: True
      RoleArn: !GetAtt RDSProxyRole.Arn
      Auth:
        - AuthScheme: SECRETS
          SecretArn: !Ref RDSLambdaUserPassword
          IAMAuth: REQUIRED
      VpcSecurityGroupIds:
        - !Ref RDSProxySecurityGroup
      VpcSubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSProxyWithIamTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    DependsOn:
      - RDSInstance
    Properties:
      DBProxyName: !Ref RDSProxyWithIam
      DBInstanceIdentifiers:
        - !Ref RDSInstance
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
        ConnectionBorrowTimeout: 120
        MaxConnectionsPercent: 90
        MaxIdleConnectionsPercent: 10

  #
  # EC2（踏み台）
  #
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AL2]
      SubnetId: !Ref PublicSubnet1
      InstanceType: t2.micro
      KeyName: !Ref EC2KeyName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        sudo yum install -y mysql

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref EC2CidrIp

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance
      EIP: !Ref ElasticIP

  #
  # VPC Endpoint
  #
  SecretsManagerVpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security Group for SecretsManager"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref FunctionSecurityGroup

  SecretsManagerVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SecretsManagerVpcEndpointSecurityGroup

  #
  # Lambda
  #
  FunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Lambda Function Security Group"
      VpcId: !Ref VPC

  GetUserWithDBPassFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_user_with_db_pass/
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          RDS_PROXY_ENDPOINT: !GetAtt RDSProxy.Endpoint
          RDS_SECRET_NAME: "sample-rds-lambda-user"
          DB_NAME: "sample_rds_proxy"
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref RDSLambdaUserPassword
        - AWSLambdaVPCAccessExecutionRole

  GetUserWithIamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_user_with_iam/
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          RDS_PROXY_ENDPOINT: !GetAtt RDSProxyWithIam.Endpoint
          RDS_PROXY_PORT: !Ref RDSDBPort
          RDS_USER: "lambda"
          DB_NAME: "sample_rds_proxy"
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: rds-db:connect
              Resource: "arn:aws:rds-db:eu-west-1:414867676510:dbuser:prx-07af81c332474cf27/lambda"
              # https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html
        - AWSLambdaVPCAccessExecutionRole
